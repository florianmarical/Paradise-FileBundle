<?php

namespace Portail\FileBundle\Entity;

use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * File
 *
 * @ORM\Table(name="files")
 * @ORM\Entity
 * @Gedmo\Uploadable(path="", callback="myCallbackMethod", filenameGenerator="ALPHANUMERIC", allowOverwrite=true, appendNumber=true)
 */
class File {

    /**
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;

    /**
     * @ORM\Column(name="path", type="string")
     * @Gedmo\UploadableFilePath
     */
    private $path;

    /**
     * @ORM\Column(name="name", type="string")
     * @Gedmo\UploadableFileName
     */
    private $name;

    /**
     * @ORM\Column(name="mime_type", type="string")
     * @Gedmo\UploadableFileMimeType
     */
    private $mimeType;

    /**
     * @ORM\Column(name="size", type="decimal")
     * @Gedmo\UploadableFileSize
     */
    private $size;

    /**
     * @var string
     *
     * @Assert\File(
     *     maxSize = "8M",
     *     notFoundMessage = "The file was not found on the disk",
     *     uploadErrorMessage = "Error in upload file"
     * )
     */
    private $file;
    
    /**
     * @ORM\OneToMany(targetEntity="GalleryFile", mappedBy="file", cascade={"persist"})
     */
    private $galleryfile;

    public function myCallbackMethod(array $info) {
        // Do some stuff with the file..
    }

    /**
     * Set file
     *
     * @param string $file
     *
     * @return Poi
     */
    public function setFile($file) {
        $this->file = $file;

        return $this;
    }

    /**
     * Get file
     *
     * @return string
     */
    public function getFile() {
        return $this->file;
    }

    public function __toString() {
        if(null !== $this->getFile() && null !== $this->getFile()->getLinkTarget() ) {
            return $this->getFile()->getLinkTarget();
        }else{
            return $this->getPath();
        }
        
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Set path
     *
     * @param string $path
     *
     * @return File
     */
    public function setPath($path) {
        $this->path = $path;

        return $this;
    }

    /**
     * Get path
     *
     * @return string
     */
    public function getPath() {
        return $this->path;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return File
     */
    public function setName($name) {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName() {
        return $this->name;
    }

    /**
     * Set mimeType
     *
     * @param string $mimeType
     *
     * @return File
     */
    public function setMimeType($mimeType) {
        $this->mimeType = $mimeType;

        return $this;
    }

    /**
     * Get mimeType
     *
     * @return string
     */
    public function getMimeType() {
        return $this->mimeType;
    }

    /**
     * Set size
     *
     * @param string $size
     *
     * @return File
     */
    public function setSize($size) {
        $this->size = $size;

        return $this;
    }

    /**
     * Get size
     *
     * @return string
     */
    public function getSize() {
        return $this->size;
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->galleryfile = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add galleryfile
     *
     * @param \Portail\FileBundle\Entity\GalleryFile $galleryfile
     *
     * @return File
     */
    public function addGalleryfile(\Portail\FileBundle\Entity\GalleryFile $galleryfile)
    {
        $this->galleryfile[] = $galleryfile;

        return $this;
    }

    /**
     * Remove galleryfile
     *
     * @param \Portail\FileBundle\Entity\GalleryFile $galleryfile
     */
    public function removeGalleryfile(\Portail\FileBundle\Entity\GalleryFile $galleryfile)
    {
        $this->galleryfile->removeElement($galleryfile);
    }

    /**
     * Get galleryfile
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getGalleryfile()
    {
        return $this->galleryfile;
    }
}
